<?php

/**
 * @file
 * Linux Post Install module install file.
 */
 
/**
 * Implements hook_install().
 */
function linux_post_install_install() { 
  // We need to clear out all of the defaults nodes that were loaded an reload them back in
  features_include_defaults('uuid_node', TRUE);
  $nodes = module_invoke_all('uuid_features_default_content');
  // The following is taken from the uuid.node file.
  // We just add a delete in to remove the nodes first.
  // This is needed because the panelizer entity_insert hooks do not know what bundles are panelized during install
  //drush_log(__FUNCTION__);
  if (!empty($nodes)) {
    module_load_include('inc', 'node', 'node.pages');
    foreach ($nodes as $data) {
      $node = (object) $data;
      $nids = entity_get_id_by_uuid('node', array($node->uuid));
      if (isset($nids[$node->uuid]) && $node->type == 'landing_page') {
        $deleted = entity_uuid_delete('node', $node->uuid);
      }
    }
    
    drupal_flush_all_caches();
    features_revert_module('linux_menu');
    
    foreach ($nodes as $data) {
      $node = (object) $data;
      if ($node->uuid == 'cc69210b-36ab-45ee-928b-ffceb64c22a5' || $node->type != 'landing_page') {
        // Don't resave the default news page. We recreated our own in Landing Pages
        continue;
      }
      node_object_prepare($node);
      //drush_log($node->uuid);
      // Find the matching UUID, with a fresh cache.
      $nids = entity_get_id_by_uuid('node', array($node->uuid));
      if (isset($nids[$node->uuid])) {
          $nid = array_key_exists($node->uuid, $nids) ? $nids[$node->uuid] : FALSE;
          $existing = node_load($nid, NULL, TRUE);
          if (!empty($existing)) {
            $node->nid = $existing->nid;
            $node->vid = $existing->vid;
          }
      }

      // The hook_alter signature is:
      // hook_uuid_node_features_rebuild_alter(&node, $module);
      drupal_alter('uuid_node_features_rebuild', $node, $module);

      $node = node_submit($node);
      uuid_features_file_field_import($node, 'node');
      node_save($node);
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function linux_post_install_uninstall() { 
  
}