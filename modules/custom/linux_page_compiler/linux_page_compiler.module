<?php

/**
 * @file
 * Linux page compiler module.
 */

/**
 * Implements hook_permission().
 */
function linux_page_compiler_permission() {
  return array(
    'administer linux page compiler' => array(
      'title' => t('Administer linux page compiler'),
      'description' => t('Configure sources for page compiler.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Creates custom menu router to deliver compiled pages from
 * Linux source repositories. Utilizes argument wildcards to
 * handle various pages that link to a specific source file.
 */
function linux_page_compiler_menu() {
  $module_path = drupal_get_path('module', 'linux_page_compiler');

  // Page routers.
  $items['manpage/%'] = array(
    'page callback' => 'linux_page_compiler_manpage',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'man_page.inc',
    'file path' => $module_path .'/pages',
    'type' => MENU_CALLBACK,
  );
  $items['howto/%'] = array(
    'page callback' => 'linux_page_compiler_howto',
    'access arguments' => array('access content'),
    'file' => 'howto_page.inc',
    'file path' => $module_path .'/pages',
    'type' => MENU_CALLBACK,
  );

  // Image loader.
  $items['page/image'] = array(
    'page callback' => 'linux_page_compiler_load_image',
    'access arguments' => array('access content'),
    'file' => 'images.inc',
    'file path' => $module_path .'/includes',
    'type' => MENU_CALLBACK,
  );

  // Administration pages.
  $items['admin/config/linux'] = array(
    'title' => 'Linux',
    'description' => 'Configure linux modules.',
    'position' => 'left',
    'weight' => -50,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/linux/pages'] = array(
    'title' => 'Page compiler',
    'description' => 'Configure settings for linux page compiler.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('linux_page_compiler_admin_settings'),
    'access arguments' => array('administer linux page compiler'),
    'file' => 'admin.inc',
    'file path' => $module_path .'/includes',
  );
  $items['admin/config/linux/pages/compiler'] = array(
    'title' => 'Compiler',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/linux/pages/index'] = array(
    'title' => 'Index',
    'description' => 'Manage index for compiled pages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('linux_page_compiler_manage_index'),
    'access arguments' => array('administer linux page compiler'),
    'file' => 'index.inc',
    'file path' => $module_path .'/includes',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Utility function; Loads the source page cache.
 *
 * @return
 *   Associtiave array of cached source pages.
 */
function linux_page_compiler_load_cache() {
  return variable_get('linux_page_cache', array());
}

/**
 * Utility function; Cleans filename for search index key.
 *
 * @param $string
 *   A simple text string to clean.
 *
 * @return
 *   Returns hashed ID value (md5).
 */
function linux_page_compiler_clean_filename($string) {
  return md5($string); // Hash for the ID
}

/**
 * Utility function; Loads a page based on filename.
 *
 * @param $filename
 *   String defining the filename for the current page.
 *
 * @return
 *   Returns the full absolute path to the pages file.
 */
function linux_page_compiler_load_page_by_name($filename) {
  $page_cache = linux_page_compiler_load_cache();
  foreach ($page_cache as $page_key => $page_data) {
    if ($page_data['filename'] == $filename) {
      return array('uri' => $page_data['uri'], 'page_key' => $page_key, 'modified' => $page_data['modified']);
    }
  }
  return FALSE;
}

/**
 * Utility function; Loads a page based on full path.
 *
 * @param $path
 *   String defining the path to the current page.
 *
 * @return
 *   Returns the full absolute path to the pages file.
 */
function linux_page_compiler_load_page_by_path($path) {
  $page_cache = linux_page_compiler_load_cache();
  foreach ($page_cache as $page_key => $page_data) {
    $page_url = explode('/', str_replace(variable_get('linux_page_source', ''), '', $page_data['uri']));
    unset($page_url[0], $page_url[1]);
    $page_url = implode('/', $page_url);
    if ($page_url == $path) {
      return array('uri' => $page_data['uri'], 'page_key' => $page_key, 'modified' => $page_data['modified']);
    }
  }
  return FALSE;
}

/**
 * Utility function; Determines if a page is new.
 *
 * @param $file_uri
 *   String defining absolute path to the file to check.
 *
 * @return
 *   Boolean value indicating if page is new or not.
 */
function linux_page_compiler_is_new($file_uri) {
  if (file_exists($file_uri)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Utility function; Caches a new source page.
 *
 * @param $file_uri
 *   String defining absolute path to the file to add.
 * 
 * @return
 *   String indicating the new pages unique hash ID.
 */
function linux_page_compiler_add_new_page($file_uri) {
  $page_cache = linux_page_compiler_load_cache();
  if (preg_match('/-a\//i', $file_uri)) {
    $page_name = explode('/', trim(str_replace(variable_get('linux_page_source', ''), '', $file_uri), '/'));
    $page_type = explode('-', strtolower($page_name[0]));
    $page_id = $page_type[0] .'-'. linux_page_compiler_clean_filename($file_uri);
    $page_stat = stat($file_uri);
    $page_cache[$page_id] = array('uri' => $file_uri, 'filename' => $page_name[count($page_name) - 1], 'modified' => $page_stat['mtime']);
    variable_set('linux_page_cache', $page_cache);
    return $page_id;
  }
  return FALSE;
}

/**
 * Implements hook_search_api_item_type_info().
 */
function linux_page_compiler_search_api_item_type_info() {
  $types['source_page'] = array(
    'name' => t('Source Page'),
    'datasource controller' => 'LinuxPageDataSourceController',
  );
  return $types;
}

/**
 * Implements phptemplate_preprocess_views_view_field().
 */
function linux_page_compiler_preprocess_views_view_field(&$vars) {
  $output = '';
  module_load_include('inc', 'linux_page_compiler', 'includes/excerpt');

  // Load page ID and validate index.
  $page_id = $vars['row']->entity;
  $page_cache = linux_page_compiler_load_cache();
  if (!isset($page_cache[$page_id])) {
    search_api_track_item_delete('source_page', array($page_id));
  }

  // Load the page HTML and extract the appropriate data.
  $html = str_replace(' >', '>', str_replace(array("\r", "\n"), ' ', file_get_contents($page_cache[$page_id]['uri'])));

  // Generate page URL for the source content.
  $page_url = explode('/', str_replace(variable_get('linux_page_source', ''), '', $page_cache[$page_id]['uri']));
  if (preg_match('/howto/i', $page_url[1])) {
    unset($page_url[0], $page_url[1]);
    $path_prefix = 'howto';
  }
  else if (preg_match('/man-html/i', $page_url[1])) {
    unset($page_url[0], $page_url[1], $page_url[2]);
    $path_prefix = 'manpage';
  }
  $page_url = $path_prefix .'/'. implode('/', $page_url);

  // Extract the <title> text.
  if ($vars['field']->field == 'source_title' && preg_match('/(?:<title[^>]*>)(.*)<\/title>/isU', $html, $matches)) {
    $output = l($matches[1], $page_url);
  }

  // Extract the <body> text.
  if ($vars['field']->field == 'source_content' && preg_match('/(?:<body[^>]*>)(.*)<\/body>/isU', $html, $matches)) {
    $excerpt_keywords = array();
    foreach ($vars['view']->exposed_raw_input as $keywords) {
      $excerpt_keywords[] = $keywords;
    }
    $output = linux_page_compiler_excerpt(implode(' ', $excerpt_keywords), $matches[1]);
  }

  $vars['output'] = $output;
}